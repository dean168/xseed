// 构建脚本及依赖
buildscript {
    repositories {
		// jcenter()
		maven { url 'http://jcenter.bintray.com' }
		maven { url 'http://repo.spring.io/plugins-release' }
	}
    dependencies {
		classpath 'org.gretty:gretty:2.3.1'
		classpath 'io.spring.gradle:propdeps-plugin:0.0.10.RELEASE'
	}
}

// 所有工程的设置
allprojects {
	group 'org.learning'
	version '0.1.RELEASE'
}

// 子工程的设置
subprojects {
	// springframework的propdeps插件
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	// eclipse 的插件，执行命令 gradle eclipse 就会生成 .project .classpath .settings
	//apply plugin: 'eclipse'
	apply plugin: 'propdeps-eclipse'
	// idea 的插件，执行命令 gradle idea 就可以导入工程了
    //apply plugin: 'idea'
    apply plugin: 'propdeps-idea'
    // 所有子项目都是 java 项目
    apply plugin: 'java'
	// java 源文件和编译使用版本
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

	// 使用的仓库
    repositories {
		mavenLocal()
		// mavenCentral()
		maven { url 'http://maven.aliyun.com/nexus/content/repositories/central' }
		// jcenter()
		maven { url 'http://jcenter.bintray.com' }
	}

    ext {
		springVersion = '5.2.0.RELEASE'
		jacksonVersion = '2.10.0'
		slf4jVersion = '1.7.28'
		hcVersion = '4.5.10'
		shiroVersion = '1.3.2'
    	psqlVersion = '42.2.2'
		junitVersion = '4.12'
	}

	// 所有子工程公共的依赖
    dependencies {
		compile("org.slf4j:slf4j-api:$slf4jVersion")
		runtime("org.slf4j:jcl-over-slf4j:$slf4jVersion")
		runtime("ch.qos.logback:logback-classic:1.2.3")
		runtime("org.logback-extensions:logback-ext-spring:0.1.5")
    	provided("javax.servlet:javax.servlet-api:3.1.0")
        testCompile("junit:junit:$junitVersion")
        testCompile("org.springframework:spring-test:$springVersion")
        testCompile("org.postgresql:postgresql:$psqlVersion")
    }
}

project(':basic') {
	dependencies {
		compile("org.springframework:spring-core:$springVersion")
		compile("org.springframework:spring-aop:$springVersion")
		compile("org.springframework:spring-beans:$springVersion")
		compile("org.springframework:spring-context:$springVersion")
		compile("org.springframework:spring-context-support:$springVersion")
		compile("org.springframework:spring-jdbc:$springVersion")
		compile("org.springframework:spring-orm:$springVersion")
		compile("org.springframework:spring-tx:$springVersion")
		compile("org.springframework:spring-web:$springVersion")
		compile("org.springframework:spring-webmvc:$springVersion")
		compile("org.hibernate:hibernate-core:5.4.2.Final")
		compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
		compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
		compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$jacksonVersion")
		compile("de.undercouch:bson4jackson:2.9.2")
		compile("commons-codec:commons-codec:1.13")
		compile("commons-fileupload:commons-fileupload:1.4")
		compile("commons-io:commons-io:2.6")
		compile("org.apache.commons:commons-lang3:3.9")
		compile("org.apache.httpcomponents:httpclient:$hcVersion")
		compile("org.apache.shiro:shiro-core:$shiroVersion")
		compile("org.apache.shiro:shiro-web:$shiroVersion")
		compile("org.apache.shiro:shiro-ehcache:$shiroVersion")
		compile("org.apache.shiro:shiro-spring:$shiroVersion")
		compile("com.alibaba:fastjson:1.2.62")
		compile("com.alibaba:druid:1.1.20")
		compile("org.freemarker:freemarker:2.3.28")
	}
}

// public 工程配置
project(':portal') {
	// 添加 war 插件
	apply plugin: 'war'
	// 添加 jetty 插件，执行命令 gradle jettyRun 就可以 http://127.0.0.1:8080/public/ 访问了
	//apply plugin: 'jetty'
	//apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'
    apply plugin: 'org.gretty'

	dependencies {
		compile project(":basic")
        runtime("org.aspectj:aspectjweaver:1.9.1")
        runtime("org.aspectj:aspectjrt:1.9.1")
        runtime("org.postgresql:postgresql:$psqlVersion")
    }

	war {
		//from "${rootProject.projectDir}/basic/src/main/webapp"
		//from "${rootProject.projectDir}/portal/src/main/webapp"
		// 将编译的 classes 打包成 jar 放在 WEB-INF/lib 目录下
		classpath = classpath - sourceSets.main.output
		from (jar) { into 'WEB-INF/lib' }
	}

	gretty {
		extraResourceBases "${rootProject.projectDir}/portal/src/main/webapp"
//        jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000']
//		servletContainer = 'jetty9.3'
        jvmArgs = ['-Xmx256m']
		httpPort = 8080
        contextPath = '/'
		debugPort = 8000
		debugSuspend = false
//		recompileOnSourceChange = false
//		reloadOnClassChange = false
//		reloadOnConfigChange = false
//		reloadOnLibChange = false
//		managedClassReload = false
//		fastReload = false
	}
}
